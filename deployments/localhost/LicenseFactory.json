{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyLicense",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "licenseOwnerAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToNumberOfLicense",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getLicense",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getLicenseOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_basicLicenseArray",
      "outputs": [
        {
          "internalType": "contract BasicLicense",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8a98fc517fc28c037f6c506ddd66482f974ad913d687b006f04bcf594db8ab31",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "597223",
    "logsBloom": "0x
    "blockHash": "0xeef7380f6dbb136bdc4acb0a9b69dc381e48a2d76987b35356d41d065a435e7c",
    "transactionHash": "0x8a98fc517fc28c037f6c506ddd66482f974ad913d687b006f04bcf594db8ab31",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "597223",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "1f9a11efc1d559032ac6f0e24989c618",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLicense\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"licenseOwnerAddress\",\"type\":\"address\"}],\"name\":\"getAddressToNumberOfLicense\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLicense\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLicenseOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_basicLicenseArray\",\"outputs\":[{\"internalType\":\"contract BasicLicense\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LicenseFactory.sol\":\"LicenseFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"contracts/BasicLicense.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17; \\n\\ncontract BasicLicense{\\n\\n\\n    address private immutable i_owner;\\n    uint256 private immutable i_licenseId;\\n\\n    constructor(address owner,uint256 licenseId) {\\n        i_owner = owner;\\n        i_licenseId = licenseId;\\n    }\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x00d15f0365f4d7ee6db32ce9d9b7a355283f6351b507fa8720734d1a02288e4f\",\"license\":\"MIT\"},\"contracts/LicenseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./BasicLicense.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract LicenseFactory{\\n    \\n    using PriceConverter for uint256;\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _licenseIds;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    address private immutable i_owner;\\n    address[] private s_licenseOwners;\\n    mapping(address => uint256) private s_addressToNumberOfLicense;\\n    AggregatorV3Interface private s_priceFeed;\\n    BasicLicense[] public s_basicLicenseArray;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    function buyLicense() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"License price is Higher!\\\"\\n        );\\n        _licenseIds.increment();\\n        uint256 newLicenseID = _licenseIds.current();\\n        BasicLicense basicLicense = new BasicLicense(msg.sender, newLicenseID);\\n        s_basicLicenseArray.push(basicLicense);\\n        s_addressToNumberOfLicense[msg.sender] += 1;\\n        s_licenseOwners.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getAddressToNumberOfLicense(address licenseOwnerAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToNumberOfLicense[licenseOwnerAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getLicense(uint256 index) public view returns (address) {\\n        return s_basicLicenseArray[index].getOwner();\\n    }\\n    function getLicenseOwners(uint256 index) public view returns (address) {\\n        return s_licenseOwners[index];\\n    }\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x716506fb2f8f78b7198e2166b80e9ab914b0f708b65da5126ee6a99668ecfa87\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\",\"keccak256\":\"0x091f39b96d338217fa2d502e819534a8ee69f2929e2bb566366f2ab8b9a9b7fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610a1e380380610a1e83398101604081905261002f91610058565b600380546001600160a01b0319166001600160a01b039290921691909117905533608052610088565b60006020828403121561006a57600080fd5b81516001600160a01b038116811461008157600080fd5b9392505050565b60805161096d6100b16000396000818161016f015281816102a101526102e3015261096d6000f3fe6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e8146101605780639e87a5cd14610193578063b2dd1212146101b1578063ba7393d0146101d1578063f9955447146101d957600080fd5b80630257c0e3146100965780630d8e6e2c146100df578063388e3c76146100f45780633ccfd60b1461012c5780636b69a59214610143575b600080fd5b3480156100a257600080fd5b506100cc6100b1366004610676565b6001600160a01b031660009081526002602052604090205490565b6040519081526020015b60405180910390f35b3480156100eb57600080fd5b506100cc6101f9565b34801561010057600080fd5b5061011461010f366004610693565b61026c565b6040516001600160a01b0390911681526020016100d6565b34801561013857600080fd5b50610141610296565b005b34801561014f57600080fd5b506100cc6802b5e3af16b188000081565b34801561016c57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610114565b34801561019f57600080fd5b506003546001600160a01b0316610114565b3480156101bd57600080fd5b506101146101cc366004610693565b610362565b6101416103ef565b3480156101e557600080fd5b506101146101f4366004610693565b61056b565b6003546040805163054fd4d560e41b815290516000926001600160a01b0316916354fd4d509160048083019260209291908290030181865afa158015610243573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026791906106ac565b905090565b6004818154811061027c57600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102df5760405163579610db60e01b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811461034c576040519150601f19603f3d011682016040523d82523d6000602084013e610351565b606091505b505090508061035f57600080fd5b50565b600060048281548110610377576103776106c5565b6000918252602091829020015460408051631127a41d60e31b815290516001600160a01b039092169263893d20e8926004808401938290030181865afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e991906106db565b92915050565b6003546802b5e3af16b1880000906104119034906001600160a01b031661059b565b10156104635760405162461bcd60e51b815260206004820152601860248201527f4c6963656e736520707269636520697320486967686572210000000000000000604482015260640160405180910390fd5b610471600080546001019055565b6000805490506000338260405161048790610654565b6001600160a01b0390921682526020820152604001604051809103906000f0801580156104b8573d6000803e3d6000fd5b506004805460018082019092557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0384161790553360009081526002602052604081208054939450919261052190849061070e565b90915550506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b031916331790555050565b600060018281548110610580576105806106c5565b6000918252602090912001546001600160a01b031692915050565b6000806105a7836105d1565b90506000670de0b6b3a76400006105be8684610721565b6105c89190610738565b95945050505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106369190610779565b505050915050806402540be40061064d91906107c9565b9392505050565b61013e806107fa83390190565b6001600160a01b038116811461035f57600080fd5b60006020828403121561068857600080fd5b813561064d81610661565b6000602082840312156106a557600080fd5b5035919050565b6000602082840312156106be57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156106ed57600080fd5b815161064d81610661565b634e487b7160e01b600052601160045260246000fd5b808201808211156103e9576103e96106f8565b80820281158282048414176103e9576103e96106f8565b60008261075557634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff8116811461077457600080fd5b919050565b600080600080600060a0868803121561079157600080fd5b61079a8661075a565b94506020860151935060408601519250606086015191506107bd6080870161075a565b90509295509295909350565b80820260008212600160ff1b841416156107e5576107e56106f8565b81810583148215176103e9576103e96106f856fe60c060405234801561001057600080fd5b5060405161013e38038061013e83398101604081905261002f91610045565b6001600160a01b0390911660805260a05261007f565b6000806040838503121561005857600080fd5b82516001600160a01b038116811461006f57600080fd5b6020939093015192949293505050565b60805160a05160a061009e600039600050506000602f015260a06000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063893d20e814602d575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006040516001600160a01b03909116815260200160405180910390f3fea2646970667358221220d028b80004bde56ff93fa8a953f703b04282843e53e7815b0e16dfbfbc95659264736f6c63430008110033a26469706673582212203b2b80614d11dc2c6609f17e23c01756faeda744a22ad39799f488befb234b8164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e8146101605780639e87a5cd14610193578063b2dd1212146101b1578063ba7393d0146101d1578063f9955447146101d957600080fd5b80630257c0e3146100965780630d8e6e2c146100df578063388e3c76146100f45780633ccfd60b1461012c5780636b69a59214610143575b600080fd5b3480156100a257600080fd5b506100cc6100b1366004610676565b6001600160a01b031660009081526002602052604090205490565b6040519081526020015b60405180910390f35b3480156100eb57600080fd5b506100cc6101f9565b34801561010057600080fd5b5061011461010f366004610693565b61026c565b6040516001600160a01b0390911681526020016100d6565b34801561013857600080fd5b50610141610296565b005b34801561014f57600080fd5b506100cc6802b5e3af16b188000081565b34801561016c57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610114565b34801561019f57600080fd5b506003546001600160a01b0316610114565b3480156101bd57600080fd5b506101146101cc366004610693565b610362565b6101416103ef565b3480156101e557600080fd5b506101146101f4366004610693565b61056b565b6003546040805163054fd4d560e41b815290516000926001600160a01b0316916354fd4d509160048083019260209291908290030181865afa158015610243573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026791906106ac565b905090565b6004818154811061027c57600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102df5760405163579610db60e01b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811461034c576040519150601f19603f3d011682016040523d82523d6000602084013e610351565b606091505b505090508061035f57600080fd5b50565b600060048281548110610377576103776106c5565b6000918252602091829020015460408051631127a41d60e31b815290516001600160a01b039092169263893d20e8926004808401938290030181865afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e991906106db565b92915050565b6003546802b5e3af16b1880000906104119034906001600160a01b031661059b565b10156104635760405162461bcd60e51b815260206004820152601860248201527f4c6963656e736520707269636520697320486967686572210000000000000000604482015260640160405180910390fd5b610471600080546001019055565b6000805490506000338260405161048790610654565b6001600160a01b0390921682526020820152604001604051809103906000f0801580156104b8573d6000803e3d6000fd5b506004805460018082019092557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0384161790553360009081526002602052604081208054939450919261052190849061070e565b90915550506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b031916331790555050565b600060018281548110610580576105806106c5565b6000918252602090912001546001600160a01b031692915050565b6000806105a7836105d1565b90506000670de0b6b3a76400006105be8684610721565b6105c89190610738565b95945050505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106369190610779565b505050915050806402540be40061064d91906107c9565b9392505050565b61013e806107fa83390190565b6001600160a01b038116811461035f57600080fd5b60006020828403121561068857600080fd5b813561064d81610661565b6000602082840312156106a557600080fd5b5035919050565b6000602082840312156106be57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156106ed57600080fd5b815161064d81610661565b634e487b7160e01b600052601160045260246000fd5b808201808211156103e9576103e96106f8565b80820281158282048414176103e9576103e96106f8565b60008261075557634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff8116811461077457600080fd5b919050565b600080600080600060a0868803121561079157600080fd5b61079a8661075a565b94506020860151935060408601519250606086015191506107bd6080870161075a565b90509295509295909350565b80820260008212600160ff1b841416156107e5576107e56106f8565b81810583148215176103e9576103e96106f856fe60c060405234801561001057600080fd5b5060405161013e38038061013e83398101604081905261002f91610045565b6001600160a01b0390911660805260a05261007f565b6000806040838503121561005857600080fd5b82516001600160a01b038116811461006f57600080fd5b6020939093015192949293505050565b60805160a05160a061009e600039600050506000602f015260a06000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063893d20e814602d575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006040516001600160a01b03909116815260200160405180910390f3fea2646970667358221220d028b80004bde56ff93fa8a953f703b04282843e53e7815b0e16dfbfbc95659264736f6c63430008110033a26469706673582212203b2b80614d11dc2c6609f17e23c01756faeda744a22ad39799f488befb234b8164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2571,
        "contract": "contracts/LicenseFactory.sol:LicenseFactory",
        "label": "_licenseIds",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)2100_storage"
      },
      {
        "astId": 2583,
        "contract": "contracts/LicenseFactory.sol:LicenseFactory",
        "label": "s_licenseOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2587,
        "contract": "contracts/LicenseFactory.sol:LicenseFactory",
        "label": "s_addressToNumberOfLicense",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2590,
        "contract": "contracts/LicenseFactory.sol:LicenseFactory",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 2594,
        "contract": "contracts/LicenseFactory.sol:LicenseFactory",
        "label": "s_basicLicenseArray",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_contract(BasicLicense)2553)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(BasicLicense)2553)dyn_storage": {
        "base": "t_contract(BasicLicense)2553",
        "encoding": "dynamic_array",
        "label": "contract BasicLicense[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(BasicLicense)2553": {
        "encoding": "inplace",
        "label": "contract BasicLicense",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)2100_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2099,
            "contract": "contracts/LicenseFactory.sol:LicenseFactory",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}