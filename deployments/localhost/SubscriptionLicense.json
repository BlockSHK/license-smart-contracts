{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_periodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "licenseName",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodSeconds",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "CancelSubscription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodSeconds",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "ExecuteSubscription",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "author",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "executeSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "extraNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "getSubscriptionHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "getSubscriptionSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "gracePeriodSeconds",
          "type": "uint256"
        }
      ],
      "name": "isSubscriptionActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isSubscriptionReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextValidTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredGasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredPeriodSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0041f540afe3c10fe46fc88e548c7d57182d92c31590bdc30fa5e7b81f085661",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1433142",
    "logsBloom": "0x
    "blockHash": "0x8f19e9772056ee7caa8af7f96f66aff2fa313cfaf08360c6853859507de52148",
    "transactionHash": "0x0041f540afe3c10fe46fc88e548c7d57182d92c31590bdc30fa5e7b81f085661",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "1433142",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x76eD2B384f9fA8649E7c15d324367f78515183aE",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "10",
    "60",
    "1",
    "Microsoft"
  ],
  "numDeployments": 1,
  "solcInputHash": "f03d71004a3f8860a8a7597026dffc2e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"licenseName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"CancelSubscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ExecuteSubscription\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancelSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extraNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getSubscriptionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getSubscriptionSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"isSubscriptionActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isSubscriptionReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextValidTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredPeriodSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SubscriptionLicense.sol\":\"SubscriptionLicense\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/SubscriptionLicense.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract SubscriptionLicense {\\n    using ECDSA for bytes32;\\n    using SafeMath for uint256;\\n\\n    //who deploys the contract\\n    address public author;\\n\\n    // optional parameters\\n    address public requiredToAddress;\\n    address public requiredTokenAddress;\\n    uint256 public requiredTokenAmount;\\n    uint256 public requiredPeriodSeconds;\\n    uint256 public requiredGasPrice;\\n    string private i_licenseName;\\n    // similar to a nonce that avoids replay attacks this allows a single execution\\n    // every x seconds for a given subscription\\n    // subscriptionHash  => next valid block number\\n    mapping(bytes32 => uint256) public nextValidTimestamp;\\n\\n    //we'll use a nonce for each from but because transactions can go through\\n    //multiple times, we allow anything but users can use this as a signal for\\n    //uniqueness\\n    mapping(address => uint256) public extraNonce;\\n\\n    event ExecuteSubscription(\\n        address indexed from, //the subscriber\\n        address indexed to, //the publisher\\n        address tokenAddress, //the token address paid to the publisher\\n        uint256 tokenAmount, //the token amount paid to the publisher\\n        uint256 periodSeconds, //the period in seconds between payments\\n        uint256 gasPrice, //the amount of tokens to pay relayer (0 for free)\\n        uint256 nonce // to allow multiple subscriptions with the same parameters\\n    );\\n\\n    event CancelSubscription(\\n        address indexed from, //the subscriber\\n        address indexed to, //the publisher\\n        address tokenAddress, //the token address paid to the publisher\\n        uint256 tokenAmount, //the token amount paid to the publisher\\n        uint256 periodSeconds, //the period in seconds between payments\\n        uint256 gasPrice, //the amount of tokens to pay relayer (0 for free)\\n        uint256 nonce // to allow multiple subscriptions with the same parameters\\n    );\\n\\n    constructor(\\n        address _toAddress,\\n        address _tokenAddress,\\n        uint256 _tokenAmount,\\n        uint256 _periodSeconds,\\n        uint256 _gasPrice,\\n        string memory licenseName\\n    ) {\\n        requiredToAddress=_toAddress;\\n        requiredTokenAddress=_tokenAddress;\\n        requiredTokenAmount=_tokenAmount;\\n        requiredPeriodSeconds=_periodSeconds;\\n        requiredGasPrice=_gasPrice;\\n        author=msg.sender;\\n        i_licenseName = licenseName;\\n    }\\n\\n    // this is used by external smart contracts to verify on-chain that a\\n    // particular subscription is \\\"paid\\\" and \\\"active\\\"\\n    // there must be a small grace period added to allow the publisher\\n    // or desktop miner to execute\\n    function isSubscriptionActive(\\n        bytes32 subscriptionHash,\\n        uint256 gracePeriodSeconds\\n    )\\n        external\\n        view\\n        returns (bool)\\n    {\\n        \\n        if(nextValidTimestamp[subscriptionHash]==type(uint).max){\\n          return false;\\n        }\\n        return (block.timestamp <=\\n                nextValidTimestamp[subscriptionHash].add(gracePeriodSeconds)\\n        );\\n    }\\n // given the subscription details, generate a hash and try to kind of follow\\n    // the eip-191 standard and eip-1077 standard from my dude @avsa\\n    function getSubscriptionHash(\\n        address from, //the subscriber\\n        address to, //the publisher\\n        address tokenAddress, //the token address paid to the publisher\\n        uint256 tokenAmount, //the token amount paid to the publisher\\n        uint256 periodSeconds, //the period in seconds between payments\\n        uint256 gasPrice, //the amount of tokens or eth to pay relayer (0 for free)\\n        uint256 nonce // to allow multiple subscriptions with the same parameters\\n    )\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        // if there are requirements from the deployer, let's make sure\\n        // those are met exactly\\n        require( requiredToAddress == address(0) || to == requiredToAddress, \\\"requiredToAddress Failure\\\" );\\n        require( requiredTokenAddress == address(0) || tokenAddress == requiredTokenAddress, \\\"requiredTokenAddress Failure\\\"  );\\n        require( requiredTokenAmount == 0 || tokenAmount == requiredTokenAmount, \\\"requiredTokenAmount Failure\\\"  );\\n        require( requiredPeriodSeconds == 0 || periodSeconds == requiredPeriodSeconds, \\\"requiredPeriodSeconds Failure\\\"  );\\n        require( requiredGasPrice == 0 || gasPrice == requiredGasPrice, \\\"requiredGasPrice Failure\\\"  );\\n\\n        return keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0),\\n                address(this),\\n                from,\\n                to,\\n                tokenAddress,\\n                tokenAmount,\\n                periodSeconds,\\n                gasPrice,\\n                nonce\\n        ));\\n    }\\n\\n    //ecrecover the signer from hash and the signature\\n    function getSubscriptionSigner(\\n        bytes32 subscriptionHash, //hash of subscription\\n        bytes memory  signature //proof the subscriber signed the meta trasaction\\n    )\\n        public\\n        pure\\n        returns (address)\\n    {\\n        return subscriptionHash.toEthSignedMessageHash().recover(signature);\\n    }\\n\\n    //check if a subscription is signed correctly and the timestamp is ready for\\n    // the next execution to happen\\n    function isSubscriptionReady(\\n        address from, //the subscriber\\n        address to, //the publisher\\n        address tokenAddress, //the token address paid to the publisher\\n        uint256 tokenAmount, //the token amount paid to the publisher\\n        uint256 periodSeconds, //the period in seconds between payments\\n        uint256 gasPrice, //the amount of the token to incentivize the relay network\\n        uint256 nonce,// to allow multiple subscriptions with the same parameters\\n        bytes memory  signature //proof the subscriber signed the meta trasaction\\n    )\\n        external\\n        view\\n        returns (bool)\\n    {\\n        bytes32 subscriptionHash = getSubscriptionHash(\\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice, nonce\\n        );\\n        address signer = getSubscriptionSigner(subscriptionHash, signature);\\n        uint256 allowance = ERC20(tokenAddress).allowance(from, address(this));\\n        uint256 balance = ERC20(tokenAddress).balanceOf(from);\\n\\n        return (\\n            signer == from &&\\n            from != to &&\\n            block.timestamp >= nextValidTimestamp[subscriptionHash] &&\\n            allowance >= tokenAmount.add(gasPrice) &&\\n            balance >= tokenAmount.add(gasPrice)\\n        );\\n    }\\n\\n    // you don't really need this if you are using the approve/transferFrom method\\n    // because you control the flow of tokens by approving this contract address,\\n    // but to make the contract an extensible example for later user I'll add this\\n    function cancelSubscription(\\n        address from, //the subscriber\\n        address to, //the publisher\\n        address tokenAddress, //the token address paid to the publisher\\n        uint256 tokenAmount, //the token amount paid to the publisher\\n        uint256 periodSeconds, //the period in seconds between payments\\n        uint256 gasPrice, //the amount of tokens or eth to pay relayer (0 for free)\\n        uint256 nonce, //to allow multiple subscriptions with the same parameters\\n        bytes memory  signature //proof the subscriber signed the meta trasaction\\n    )\\n        external\\n        returns (bool success)\\n    {\\n        bytes32 subscriptionHash = getSubscriptionHash(\\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice, nonce\\n        );\\n        address signer = getSubscriptionSigner(subscriptionHash, signature);\\n\\n        //the signature must be valid\\n        require(signer == from, \\\"Invalid Signature for subscription cancellation\\\");\\n\\n        //make sure it's the subscriber\\n        require(from == msg.sender, 'msg.sender is not the subscriber');\\n\\n        //nextValidTimestamp should be a timestamp that will never\\n        //be reached during the brief window human existence\\n        nextValidTimestamp[subscriptionHash]=type(uint).max;\\n\\n        emit CancelSubscription(\\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice, nonce\\n        );\\n\\n        return true;\\n    }\\n\\n    // execute the transferFrom to pay the publisher from the subscriber\\n    // the subscriber has full control by approving this contract an allowance\\n    function executeSubscription(\\n        address from, //the subscriber\\n        address to, //the publisher\\n        address tokenAddress, //the token address paid to the publisher\\n        uint256 tokenAmount, //the token amount paid to the publisher\\n        uint256 periodSeconds, //the period in seconds between payments\\n        uint256 gasPrice, //the amount of tokens or eth to pay relayer (0 for free)\\n        uint256 nonce, // to allow multiple subscriptions with the same parameters\\n        bytes memory signature //proof the subscriber signed the meta trasaction\\n    )\\n        public\\n        returns (bool success)\\n    {\\n        // make sure the subscription is valid and ready\\n        require(this.isSubscriptionReady(from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice, nonce, signature), \\\"Subscription is not ready or conditions of transction are not met\\\");\\n        bytes32 subscriptionHash = getSubscriptionHash(\\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice, nonce\\n        );\\n        //increment the timestamp by the period so it wont be valid until then\\n        nextValidTimestamp[subscriptionHash] = block.timestamp.add(periodSeconds);\\n\\n        //check to see if this nonce is larger than the current count and we'll set that for this 'from'\\n        if(nonce > extraNonce[from]){\\n          extraNonce[from] = nonce;\\n        }\\n\\n        // now, let make the transfer from the subscriber to the publisher\\n        uint256 startingBalance = ERC20(tokenAddress).balanceOf(to);\\n        ERC20(tokenAddress).transferFrom(from,to,tokenAmount);\\n        require(\\n          (startingBalance+tokenAmount) == ERC20(tokenAddress).balanceOf(to),\\n          \\\"ERC20 Balance did not change correctly\\\"\\n        );\\n\\n        require(\\n          checkSuccess(),\\n          \\\"Subscription::executeSubscription TransferFrom failed\\\"\\n          );\\n\\n\\n        emit ExecuteSubscription(\\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice, nonce\\n        );\\n\\n        // it is possible for the subscription execution to be run by a third party\\n        // incentivized in the terms of the subscription with a gasPrice of the tokens\\n        //  - pay that out now...\\n        if (gasPrice > 0) {\\n            //the relayer is incentivized by a little of the same token from\\n            // the subscriber ... as far as the subscriber knows, they are\\n            // just sending X tokens to the publisher, but the publisher can\\n            // choose to send Y of those X to a relayer to run their transactions\\n            // the publisher will receive X - Y tokens\\n            // this must all be setup in the constructor\\n            // if not, the subscriber chooses all the params including what goes\\n            // to the publisher and what goes to the relayer\\n            ERC20(tokenAddress).transferFrom(from, msg.sender, gasPrice);\\n            require(\\n                checkSuccess(),\\n                \\\"Subscription::executeSubscription Failed to pay gas as from account\\\"\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    // because of issues with non-standard erc20s the transferFrom can always return false\\n    // to fix this we run it and then check the return of the previous function:\\n    //    https://github.com/ethereum/solidity/issues/4116\\n    /**\\n     * Checks the return value of the previous function. Returns true if the previous function\\n     * function returned 32 non-zero bytes or returned zero bytes.\\n     */\\n    function checkSuccess(\\n    )\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        uint256 returnValue = 0;\\n\\n        /* solium-disable-next-line security/no-inline-assembly */\\n        assembly {\\n            // check number of bytes returned from last function call\\n            switch returndatasize()\\n\\n            // no bytes returned: assume success\\n            case 0x0 {\\n                returnValue := 1\\n            }\\n\\n            // 32 bytes returned: check if non-zero\\n            case 0x20 {\\n                // copy 32 bytes into scratch space\\n                returndatacopy(0x0, 0x0, 0x20)\\n\\n                // load those bytes into returnValue\\n                returnValue := mload(0x0)\\n            }\\n\\n            // not sure what was returned: dont mark as success\\n            default { }\\n        }\\n\\n        return returnValue != 0;\\n    }\\n\\n    // we would like a way for the author to completly destroy the subscription\\n    // contract to prevent further transfers\\n    function endContract()\\n        external\\n    {\\n      require(msg.sender==author);\\n      selfdestruct(payable(author));\\n    }\\n\\n    // let's go ahead and revert any ETH sent directly to the contract\\n    fallback() external payable   {\\n       revert ();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"bad call\\\");\\n    }\\n}\",\"keccak256\":\"0x04ad9746bba0d7c65cd935c4791f9e32f8d575aca3cc6c13e634603faccd94ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001933380380620019338339810160408190526200003491620000cc565b600180546001600160a01b038089166001600160a01b0319928316179092556002805492881692821692909217909155600385905560048490556005839055600080549091163317905560066200008c828262000272565b505050505050506200033e565b80516001600160a01b0381168114620000b157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215620000e657600080fd5b620000f18762000099565b955060206200010281890162000099565b604089015160608a015160808b015160a08c0151939950919750955093506001600160401b03808211156200013657600080fd5b818a0191508a601f8301126200014b57600080fd5b815181811115620001605762000160620000b6565b604051601f8201601f19908116603f011681019083821181831017156200018b576200018b620000b6565b816040528281528d86848701011115620001a457600080fd5b600093505b82841015620001c85784840186015181850187015292850192620001a9565b60008684830101528096505050505050509295509295509295565b600181811c90821680620001f857607f821691505b6020821081036200021957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200026d57600081815260208120601f850160051c81016020861015620002485750805b601f850160051c820191505b81811015620002695782815560010162000254565b5050505b505050565b81516001600160401b038111156200028e576200028e620000b6565b620002a6816200029f8454620001e3565b846200021f565b602080601f831160018114620002de5760008415620002c55750858301515b600019600386901b1c1916600185901b17855562000269565b600085815260208120601f198616915b828110156200030f57888601518255948401946001909101908401620002ee565b50858210156200032e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6115e5806200034e6000396000f3fe6080604052600436106100ec5760003560e01c8063a3d53d181161008a578063c814786511610059578063c8147865146102af578063d3c576cd146102cf578063d933c066146102ef578063ff59bff81461030f57600080fd5b8063a3d53d181461022b578063a6c3e6b914610258578063ae702ba414610278578063bb6e7de91461029857600080fd5b8063384c3335116100c6578063384c3335146101a55780636b40bba1146101c55780636f264b2e146101db57806371d22d4d146101fb57600080fd5b806310d920601461012e57806318f321a31461015757806329d428ca1461018f57600080fd5b366101295760405162461bcd60e51b81526020600482015260086024820152671898590818d85b1b60c21b60448201526064015b60405180910390fd5b600080fd5b34801561013a57600080fd5b5061014460055481565b6040519081526020015b60405180910390f35b34801561016357600080fd5b506101776101723660046112e7565b61033c565b6040516001600160a01b03909116815260200161014e565b34801561019b57600080fd5b5061014460035481565b3480156101b157600080fd5b50600154610177906001600160a01b031681565b3480156101d157600080fd5b5061014460045481565b3480156101e757600080fd5b50600254610177906001600160a01b031681565b34801561020757600080fd5b5061021b61021636600461134a565b6103a8565b604051901515815260200161014e565b34801561023757600080fd5b506101446102463660046113e0565b60086020526000908152604090205481565b34801561026457600080fd5b50600054610177906001600160a01b031681565b34801561028457600080fd5b5061021b6102933660046113fb565b610521565b3480156102a457600080fd5b506102ad610562565b005b3480156102bb57600080fd5b506101446102ca36600461141d565b610587565b3480156102db57600080fd5b5061021b6102ea36600461134a565b61080e565b3480156102fb57600080fd5b5061021b61030a36600461134a565b610d0d565b34801561031b57600080fd5b5061014461032a366004611485565b60076020526000908152604090205481565b600061039f82610399856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90610e9d565b90505b92915050565b6000806103ba8a8a8a8a8a8a8a610587565b905060006103c8828561033c565b90508a6001600160a01b0316816001600160a01b0316146104435760405162461bcd60e51b815260206004820152602f60248201527f496e76616c6964205369676e617475726520666f72207375627363726970746960448201526e37b71031b0b731b2b63630ba34b7b760891b6064820152608401610120565b6001600160a01b038b16331461049b5760405162461bcd60e51b815260206004820181905260248201527f6d73672e73656e646572206973206e6f742074686520737562736372696265726044820152606401610120565b600082815260076020908152604091829020600019905581516001600160a01b038c811682529181018b905291820189905260608201889052608082018790528b811691908d16907f51a97a25211c2be9b0b1dd64ee1de490cdb047390e6eba984e6a1d126e6ac4569060a00160405180910390a35060019a9950505050505050505050565b60008281526007602052604081205460010161053f575060006103a2565b6000838152600760205260409020546105589083610ec1565b4211159392505050565b6000546001600160a01b0316331461057957600080fd5b6000546001600160a01b0316ff5b6001546000906001600160a01b031615806105af57506001546001600160a01b038881169116145b6105fb5760405162461bcd60e51b815260206004820152601960248201527f7265717569726564546f41646472657373204661696c757265000000000000006044820152606401610120565b6002546001600160a01b0316158061062057506002546001600160a01b038781169116145b61066c5760405162461bcd60e51b815260206004820152601c60248201527f7265717569726564546f6b656e41646472657373204661696c757265000000006044820152606401610120565b600354158061067c575060035485145b6106c85760405162461bcd60e51b815260206004820152601b60248201527f7265717569726564546f6b656e416d6f756e74204661696c75726500000000006044820152606401610120565b60045415806106d8575060045484145b6107245760405162461bcd60e51b815260206004820152601d60248201527f7265717569726564506572696f645365636f6e6473204661696c7572650000006044820152606401610120565b6005541580610734575060055483145b6107805760405162461bcd60e51b815260206004820152601860248201527f72657175697265644761735072696365204661696c75726500000000000000006044820152606401610120565b604051601960f81b6020820152600060218201526bffffffffffffffffffffffff1930606090811b821660228401528a811b8216603684015289811b8216604a84015288901b16605e820152607281018690526092810185905260b2810184905260d2810183905260f201604051602081830303815290604052805190602001209050979650505050505050565b604051636c99e03360e11b8152600090309063d933c06690610842908c908c908c908c908c908c908c908c9060040161149e565b602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190611536565b6108ff5760405162461bcd60e51b815260206004820152604160248201527f537562736372697074696f6e206973206e6f74207265616479206f7220636f6e60448201527f646974696f6e73206f66207472616e736374696f6e20617265206e6f74206d656064820152601d60fa1b608482015260a401610120565b60006109108a8a8a8a8a8a8a610587565b905061091c4287610ec1565b6000828152600760209081526040808320939093556001600160a01b038d168252600890522054841115610966576001600160a01b038a1660009081526008602052604090208490555b6040516370a0823160e01b81526001600160a01b038a81166004830152600091908a16906370a0823190602401602060405180830381865afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d4919061155f565b6040516323b872dd60e01b81526001600160a01b038d811660048301528c81166024830152604482018b9052919250908a16906323b872dd906064016020604051808303816000875af1158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a539190611536565b506040516370a0823160e01b81526001600160a01b038b811660048301528a16906370a0823190602401602060405180830381865afa158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe919061155f565b610ac88983611578565b14610b245760405162461bcd60e51b815260206004820152602660248201527f45524332302042616c616e636520646964206e6f74206368616e676520636f72604482015265726563746c7960d01b6064820152608401610120565b610b2c610ecd565b610b965760405162461bcd60e51b815260206004820152603560248201527f537562736372697074696f6e3a3a65786563757465537562736372697074696f6044820152741b88151c985b9cd9995c919c9bdb4819985a5b1959605a1b6064820152608401610120565b604080516001600160a01b038b81168252602082018b90529181018990526060810188905260808101879052818c16918d16907f96d296c945eee0618d3cc6f435f4d59f14bcefd708eab22c3de30df20b1347939060a00160405180910390a38515610cfc576040516323b872dd60e01b81526001600160a01b038c81166004830152336024830152604482018890528a16906323b872dd906064016020604051808303816000875af1158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c759190611536565b50610c7e610ecd565b610cfc5760405162461bcd60e51b815260206004820152604360248201527f537562736372697074696f6e3a3a65786563757465537562736372697074696f60448201527f6e204661696c656420746f20706179206761732061732066726f6d206163636f6064820152621d5b9d60ea1b608482015260a401610120565b5060019a9950505050505050505050565b600080610d1f8a8a8a8a8a8a8a610587565b90506000610d2d828561033c565b604051636eb1769f60e11b81526001600160a01b038d811660048301523060248301529192506000918b169063dd62ed3e90604401602060405180830381865afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da3919061155f565b6040516370a0823160e01b81526001600160a01b038e811660048301529192506000918c16906370a0823190602401602060405180830381865afa158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e13919061155f565b90508c6001600160a01b0316836001600160a01b0316148015610e4857508b6001600160a01b03168d6001600160a01b031614155b8015610e6257506000848152600760205260409020544210155b8015610e775750610e738a89610ec1565b8210155b8015610e8c5750610e888a89610ec1565b8110155b9d9c50505050505050505050505050565b6000806000610eac8585610f01565b91509150610eb981610f6f565b509392505050565b600061039f8284611578565b6000803d8015610ee45760208114610eed57610ef9565b60019150610ef9565b60206000803e60005191505b501515919050565b6000808251604103610f375760208301516040840151606085015160001a610f2b87828585611128565b94509450505050610f68565b8251604003610f605760208301516040840151610f55868383611215565b935093505050610f68565b506000905060025b9250929050565b6000816004811115610f8357610f83611599565b03610f8b5750565b6001816004811115610f9f57610f9f611599565b03610fec5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610120565b600281600481111561100057611000611599565b0361104d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610120565b600381600481111561106157611061611599565b036110b95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610120565b60048160048111156110cd576110cd611599565b036111255760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610120565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561115f575060009050600361120c565b8460ff16601b1415801561117757508460ff16601c14155b15611188575060009050600461120c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156111dc573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166112055760006001925092505061120c565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161123687828885611128565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261126b57600080fd5b813567ffffffffffffffff8082111561128657611286611244565b604051601f8301601f19908116603f011681019082821181831017156112ae576112ae611244565b816040528381528660208588010111156112c757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156112fa57600080fd5b82359150602083013567ffffffffffffffff81111561131857600080fd5b6113248582860161125a565b9150509250929050565b80356001600160a01b038116811461134557600080fd5b919050565b600080600080600080600080610100898b03121561136757600080fd5b6113708961132e565b975061137e60208a0161132e565b965061138c60408a0161132e565b9550606089013594506080890135935060a0890135925060c0890135915060e089013567ffffffffffffffff8111156113c457600080fd5b6113d08b828c0161125a565b9150509295985092959890939650565b6000602082840312156113f257600080fd5b61039f8261132e565b6000806040838503121561140e57600080fd5b50508035926020909101359150565b600080600080600080600060e0888a03121561143857600080fd5b6114418861132e565b965061144f6020890161132e565b955061145d6040890161132e565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60006020828403121561149757600080fd5b5035919050565b600061010060018060a01b03808c1684526020818c1681860152818b1660408601528960608601528860808601528760a08601528660c08601528260e0860152855191508183860152600092505b8183101561150b578583018101518584016101200152918201916114ec565b506101209150600082828601015281601f19601f830116850101925050509998505050505050505050565b60006020828403121561154857600080fd5b8151801515811461155857600080fd5b9392505050565b60006020828403121561157157600080fd5b5051919050565b808201808211156103a257634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212206c8fdef722519d48a46b5794f453978daff5ac249640ac2c9c11f42e0a8a4cc864736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c8063a3d53d181161008a578063c814786511610059578063c8147865146102af578063d3c576cd146102cf578063d933c066146102ef578063ff59bff81461030f57600080fd5b8063a3d53d181461022b578063a6c3e6b914610258578063ae702ba414610278578063bb6e7de91461029857600080fd5b8063384c3335116100c6578063384c3335146101a55780636b40bba1146101c55780636f264b2e146101db57806371d22d4d146101fb57600080fd5b806310d920601461012e57806318f321a31461015757806329d428ca1461018f57600080fd5b366101295760405162461bcd60e51b81526020600482015260086024820152671898590818d85b1b60c21b60448201526064015b60405180910390fd5b600080fd5b34801561013a57600080fd5b5061014460055481565b6040519081526020015b60405180910390f35b34801561016357600080fd5b506101776101723660046112e7565b61033c565b6040516001600160a01b03909116815260200161014e565b34801561019b57600080fd5b5061014460035481565b3480156101b157600080fd5b50600154610177906001600160a01b031681565b3480156101d157600080fd5b5061014460045481565b3480156101e757600080fd5b50600254610177906001600160a01b031681565b34801561020757600080fd5b5061021b61021636600461134a565b6103a8565b604051901515815260200161014e565b34801561023757600080fd5b506101446102463660046113e0565b60086020526000908152604090205481565b34801561026457600080fd5b50600054610177906001600160a01b031681565b34801561028457600080fd5b5061021b6102933660046113fb565b610521565b3480156102a457600080fd5b506102ad610562565b005b3480156102bb57600080fd5b506101446102ca36600461141d565b610587565b3480156102db57600080fd5b5061021b6102ea36600461134a565b61080e565b3480156102fb57600080fd5b5061021b61030a36600461134a565b610d0d565b34801561031b57600080fd5b5061014461032a366004611485565b60076020526000908152604090205481565b600061039f82610399856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90610e9d565b90505b92915050565b6000806103ba8a8a8a8a8a8a8a610587565b905060006103c8828561033c565b90508a6001600160a01b0316816001600160a01b0316146104435760405162461bcd60e51b815260206004820152602f60248201527f496e76616c6964205369676e617475726520666f72207375627363726970746960448201526e37b71031b0b731b2b63630ba34b7b760891b6064820152608401610120565b6001600160a01b038b16331461049b5760405162461bcd60e51b815260206004820181905260248201527f6d73672e73656e646572206973206e6f742074686520737562736372696265726044820152606401610120565b600082815260076020908152604091829020600019905581516001600160a01b038c811682529181018b905291820189905260608201889052608082018790528b811691908d16907f51a97a25211c2be9b0b1dd64ee1de490cdb047390e6eba984e6a1d126e6ac4569060a00160405180910390a35060019a9950505050505050505050565b60008281526007602052604081205460010161053f575060006103a2565b6000838152600760205260409020546105589083610ec1565b4211159392505050565b6000546001600160a01b0316331461057957600080fd5b6000546001600160a01b0316ff5b6001546000906001600160a01b031615806105af57506001546001600160a01b038881169116145b6105fb5760405162461bcd60e51b815260206004820152601960248201527f7265717569726564546f41646472657373204661696c757265000000000000006044820152606401610120565b6002546001600160a01b0316158061062057506002546001600160a01b038781169116145b61066c5760405162461bcd60e51b815260206004820152601c60248201527f7265717569726564546f6b656e41646472657373204661696c757265000000006044820152606401610120565b600354158061067c575060035485145b6106c85760405162461bcd60e51b815260206004820152601b60248201527f7265717569726564546f6b656e416d6f756e74204661696c75726500000000006044820152606401610120565b60045415806106d8575060045484145b6107245760405162461bcd60e51b815260206004820152601d60248201527f7265717569726564506572696f645365636f6e6473204661696c7572650000006044820152606401610120565b6005541580610734575060055483145b6107805760405162461bcd60e51b815260206004820152601860248201527f72657175697265644761735072696365204661696c75726500000000000000006044820152606401610120565b604051601960f81b6020820152600060218201526bffffffffffffffffffffffff1930606090811b821660228401528a811b8216603684015289811b8216604a84015288901b16605e820152607281018690526092810185905260b2810184905260d2810183905260f201604051602081830303815290604052805190602001209050979650505050505050565b604051636c99e03360e11b8152600090309063d933c06690610842908c908c908c908c908c908c908c908c9060040161149e565b602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190611536565b6108ff5760405162461bcd60e51b815260206004820152604160248201527f537562736372697074696f6e206973206e6f74207265616479206f7220636f6e60448201527f646974696f6e73206f66207472616e736374696f6e20617265206e6f74206d656064820152601d60fa1b608482015260a401610120565b60006109108a8a8a8a8a8a8a610587565b905061091c4287610ec1565b6000828152600760209081526040808320939093556001600160a01b038d168252600890522054841115610966576001600160a01b038a1660009081526008602052604090208490555b6040516370a0823160e01b81526001600160a01b038a81166004830152600091908a16906370a0823190602401602060405180830381865afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d4919061155f565b6040516323b872dd60e01b81526001600160a01b038d811660048301528c81166024830152604482018b9052919250908a16906323b872dd906064016020604051808303816000875af1158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a539190611536565b506040516370a0823160e01b81526001600160a01b038b811660048301528a16906370a0823190602401602060405180830381865afa158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe919061155f565b610ac88983611578565b14610b245760405162461bcd60e51b815260206004820152602660248201527f45524332302042616c616e636520646964206e6f74206368616e676520636f72604482015265726563746c7960d01b6064820152608401610120565b610b2c610ecd565b610b965760405162461bcd60e51b815260206004820152603560248201527f537562736372697074696f6e3a3a65786563757465537562736372697074696f6044820152741b88151c985b9cd9995c919c9bdb4819985a5b1959605a1b6064820152608401610120565b604080516001600160a01b038b81168252602082018b90529181018990526060810188905260808101879052818c16918d16907f96d296c945eee0618d3cc6f435f4d59f14bcefd708eab22c3de30df20b1347939060a00160405180910390a38515610cfc576040516323b872dd60e01b81526001600160a01b038c81166004830152336024830152604482018890528a16906323b872dd906064016020604051808303816000875af1158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c759190611536565b50610c7e610ecd565b610cfc5760405162461bcd60e51b815260206004820152604360248201527f537562736372697074696f6e3a3a65786563757465537562736372697074696f60448201527f6e204661696c656420746f20706179206761732061732066726f6d206163636f6064820152621d5b9d60ea1b608482015260a401610120565b5060019a9950505050505050505050565b600080610d1f8a8a8a8a8a8a8a610587565b90506000610d2d828561033c565b604051636eb1769f60e11b81526001600160a01b038d811660048301523060248301529192506000918b169063dd62ed3e90604401602060405180830381865afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da3919061155f565b6040516370a0823160e01b81526001600160a01b038e811660048301529192506000918c16906370a0823190602401602060405180830381865afa158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e13919061155f565b90508c6001600160a01b0316836001600160a01b0316148015610e4857508b6001600160a01b03168d6001600160a01b031614155b8015610e6257506000848152600760205260409020544210155b8015610e775750610e738a89610ec1565b8210155b8015610e8c5750610e888a89610ec1565b8110155b9d9c50505050505050505050505050565b6000806000610eac8585610f01565b91509150610eb981610f6f565b509392505050565b600061039f8284611578565b6000803d8015610ee45760208114610eed57610ef9565b60019150610ef9565b60206000803e60005191505b501515919050565b6000808251604103610f375760208301516040840151606085015160001a610f2b87828585611128565b94509450505050610f68565b8251604003610f605760208301516040840151610f55868383611215565b935093505050610f68565b506000905060025b9250929050565b6000816004811115610f8357610f83611599565b03610f8b5750565b6001816004811115610f9f57610f9f611599565b03610fec5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610120565b600281600481111561100057611000611599565b0361104d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610120565b600381600481111561106157611061611599565b036110b95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610120565b60048160048111156110cd576110cd611599565b036111255760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610120565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561115f575060009050600361120c565b8460ff16601b1415801561117757508460ff16601c14155b15611188575060009050600461120c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156111dc573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166112055760006001925092505061120c565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161123687828885611128565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261126b57600080fd5b813567ffffffffffffffff8082111561128657611286611244565b604051601f8301601f19908116603f011681019082821181831017156112ae576112ae611244565b816040528381528660208588010111156112c757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156112fa57600080fd5b82359150602083013567ffffffffffffffff81111561131857600080fd5b6113248582860161125a565b9150509250929050565b80356001600160a01b038116811461134557600080fd5b919050565b600080600080600080600080610100898b03121561136757600080fd5b6113708961132e565b975061137e60208a0161132e565b965061138c60408a0161132e565b9550606089013594506080890135935060a0890135925060c0890135915060e089013567ffffffffffffffff8111156113c457600080fd5b6113d08b828c0161125a565b9150509295985092959890939650565b6000602082840312156113f257600080fd5b61039f8261132e565b6000806040838503121561140e57600080fd5b50508035926020909101359150565b600080600080600080600060e0888a03121561143857600080fd5b6114418861132e565b965061144f6020890161132e565b955061145d6040890161132e565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60006020828403121561149757600080fd5b5035919050565b600061010060018060a01b03808c1684526020818c1681860152818b1660408601528960608601528860808601528760a08601528660c08601528260e0860152855191508183860152600092505b8183101561150b578583018101518584016101200152918201916114ec565b506101209150600082828601015281601f19601f830116850101925050509998505050505050505050565b60006020828403121561154857600080fd5b8151801515811461155857600080fd5b9392505050565b60006020828403121561157157600080fd5b5051919050565b808201808211156103a257634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212206c8fdef722519d48a46b5794f453978daff5ac249640ac2c9c11f42e0a8a4cc864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1362,
        "contract": "contracts/SubscriptionLicense.sol:SubscriptionLicense",
        "label": "author",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1364,
        "contract": "contracts/SubscriptionLicense.sol:SubscriptionLicense",
        "label": "requiredToAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1366,
        "contract": "contracts/SubscriptionLicense.sol:SubscriptionLicense",
        "label": "requiredTokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1368,
        "contract": "contracts/SubscriptionLicense.sol:SubscriptionLicense",
        "label": "requiredTokenAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1370,
        "contract": "contracts/SubscriptionLicense.sol:SubscriptionLicense",
        "label": "requiredPeriodSeconds",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1372,
        "contract": "contracts/SubscriptionLicense.sol:SubscriptionLicense",
        "label": "requiredGasPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1374,
        "contract": "contracts/SubscriptionLicense.sol:SubscriptionLicense",
        "label": "i_licenseName",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 1378,
        "contract": "contracts/SubscriptionLicense.sol:SubscriptionLicense",
        "label": "nextValidTimestamp",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1382,
        "contract": "contracts/SubscriptionLicense.sol:SubscriptionLicense",
        "label": "extraNonce",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}